apply plugin: 'groovy'
apply plugin: 'idea'

group = 'curious-attempt-bunny'
artifactId = 'gradle-github-deployer'
version = '0.1-SNAPSHOT'

// dangerously obscure leverage of buildscript methods being evaluated first
//if (pluginBuilt) {
//    apply plugin: 'githubDeployer'
//}

repositories {
	mavenCentral()
    flatDir name: 'localRepo', dirs: ['local-repo']
}

dependencies {
	groovy 'org.codehaus.groovy:groovy-all:1.8.0'
    compile gradleApi()

    compile 'org.apache.httpcomponents:httpclient:4.1.1'
}

uploadArchives {
    repositories {
        add project.repositories.localRepo
    }
}

/*
buildscript {
    // dangerously obscure leverage of buildscript methods being evaluated first
    project.group = 'com.curiousattemptbunny'
    project.artifactId = 'gradle-github-deployer'
    project.version = '0.1-SNAPSHOT'

    // snake eats tail
    File libDir = new File(project.buildDir, "libs")
    project.pluginBuilt = new File(libDir, "${artifactId}-${version}.jar").exists()
    if (pluginBuilt) {
        new File(libDir, "${artifactId}-hack-${version}.jar").write new File(libDir, "${artifactId}-${version}.jar").text
        repositories {
            flatDir(dirs: libDir)
        }

        dependencies {
            classpath "${group}:${artifactId}-hack:${version}"

            // humph
            classpath 'org.apache.httpcomponents:httpclient:4.1.1'
        }
    }
}

if (pluginBuilt) {
    uploadArchives {
        repositories {
            githubDeployer(userName: githubUsername, password: githubPassword)
        }
    }
}

jar {
    baseName = project.artifactId
}

/*
import org.apache.ivy.plugins.resolver.DependencyResolver
import org.apache.ivy.core.resolve.ResolvedModuleRevision
import org.apache.ivy.core.module.descriptor.DependencyDescriptor
import org.apache.ivy.core.resolve.ResolveData
import org.apache.ivy.plugins.resolver.util.ResolvedResource
import org.apache.ivy.core.report.DownloadReport
import org.apache.ivy.core.module.descriptor.Artifact
import org.apache.ivy.core.resolve.DownloadOptions
import org.apache.ivy.core.report.ArtifactDownloadReport
import org.apache.ivy.core.cache.ArtifactOrigin
import org.apache.ivy.core.module.id.ModuleRevisionId
import org.apache.ivy.core.search.OrganisationEntry
import org.apache.ivy.core.search.ModuleEntry
import org.apache.ivy.core.search.RevisionEntry
import org.apache.ivy.plugins.namespace.Namespace
import org.apache.ivy.plugins.resolver.ResolverSettings
import org.apache.ivy.core.cache.RepositoryCacheManager
import org.gradle.api.internal.artifacts.ivyservice.NoOpRepositoryCacheManager
import org.apache.ivy.plugins.resolver.URLResolver

class GitHubResolver extends URLResolver {
    String getName() {
        return "GitHubResolver"
    }

    void publish(Artifact artifact, File file, boolean overwrite) {
        println artifact
        println file
        println overwrite
    }
}

buildscript {
	repositories {
		mavenCentral()
	}
	
	dependencies {
		classpath 'org.codehaus.groovy:groovy-all:1.8.0'
		classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.1'
	}
}

import groovyx.net.http.HTTPBuilder
import groovy.json.JsonBuilder
import org.apache.http.HttpRequestInterceptor
import org.apache.http.HttpRequest
import org.apache.http.protocol.HttpContext

import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.ByteArrayPartSource;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.apache.commons.httpclient.methods.multipart.StringPart;
import org.apache.commons.httpclient.params.HttpMethodParams;


githubUser = 'curious-attempt-bunny'
githubRepo = artifact

task sampleUpload << {
	def http = new HTTPBuilder("https://api.github.com")
	
	def auth = "$githubUsername:$githubPassword".toString()
	http.client.addRequestInterceptor(new HttpRequestInterceptor() {
		void process(HttpRequest httpRequest, HttpContext httpContext) {
			httpRequest.addHeader('Authorization', 'Basic ' + auth.bytes.encodeBase64().toString())
		}
	})
	
	File file = new File("sample.txt")
	
	def json = new JsonBuilder()
	
	json {
		name file.name+System.currentTimeMillis()
		size file.length()
	}
	
	def document = json.toString()
	
	def path = "/repos/$githubUser/$githubRepo/downloads"
	
	def upload = http.request( POST, JSON ) {
		uri.path = path
		body = document
	};
	
	def map = [key: upload.path,
			acl: upload.acl,
			success_action_status: 201,
			Filename: upload.name,
			AWSAccessKeyId: upload.accesskeyid,
			Policy: upload.policy,
			Signature: upload.signature,
			'Content-Type': upload.mime_type,
			file: file.text ]
  
      PostMethod s3Post = new PostMethod(upload.s3_url);
  Part[] parts = map.collect { new StringPart(it.key, it.value.toString()) } as Part[];
  s3Post.setRequestEntity(
      new MultipartRequestEntity(parts, s3Post.getParams())
      );
  HttpClient client = new HttpClient();
  int status = client.executeMethod(s3Post);
	println status  

}

*/